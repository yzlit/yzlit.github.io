[{"title":"十几年后台工程师来讲讲限流的思路","date":"2019-01-12T15:46:47.000Z","path":"2019/01/12/十几年后台工程师来讲讲限流的思路/","text":"一 ”两窗两桶“限流算法1、固定窗口固定窗口指的是为一定时间段的流量设置一个阈值，超过则触发限流策略（丢弃或者停留） 2、滑动窗口滑动窗口算法 类似于我们学过TCP的滑动窗口，对固定窗口的一种优化， 二、做「限流」的最佳实践1、四种策略该如何选择？首先，固定窗口。一般来说，如非时间紧迫，不建议选择这个方案，太过生硬。但是，为了能快速止损眼前的问题可以作为临时应急的方案。 其次，滑动窗口。这个方案适用于对异常结果「高容忍」的场景，毕竟相比“两窗”少了一个缓冲区。但是，胜在实现简单。 然后，漏桶。个人觉得这个方案最适合作为一个通用方案。虽说资源的利用率上不是极致，但是「宽进严出」的思路在保护系统的同时还留有一些余地，使得它的适用场景更广。 最后，令牌桶。当你需要尽可能的压榨程序的性能（此时桶的最大容量必然会大于等于程序的最大并发能力），并且所处的场景流量进入波动不是很大（不至于一瞬间取完令牌，压垮后端系统）。","tags":[{"name":"限流,固定窗口,滑动窗口,漏桶,令牌桶","slug":"限流-固定窗口-滑动窗口-漏桶-令牌桶","permalink":"https://yzlit.github.io/tags/限流-固定窗口-滑动窗口-漏桶-令牌桶/"}]},{"title":"测试","date":"2019-01-12T05:30:57.000Z","path":"2019/01/12/My-New-Post/","text":"","tags":[{"name":"测试","slug":"测试","permalink":"https://yzlit.github.io/tags/测试/"}]},{"title":"Hello World","date":"2019-01-12T05:23:40.717Z","path":"2019/01/12/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]